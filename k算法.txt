/*
hdoj 1301  kÀ„∑®
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
int MinL, k;
int s[27];
typedef struct
{
	char begin;
	char end;
	int val;
}Edge;
Edge edge[360];
int Cmp(Edge a, Edge b) {
	if (a.val<b.val)
		return 1;
	else
		return 0;
}


/*int Find(int m) {
	if (s[m] == m)
		return m;
	else {
		s[m] = Find(s[m]);
		return s[m];
	}
}æ´ª™*/
int Kruskal() {
	int i = 0, a = 0, b = 0, X = 0, Y = 0;
	for (i = 0; i<27; i++)
		s[i] = i;
	for (i = 0; i<k; i++) {
		X = edge[i].begin - 'A';
		Y = edge[i].end - 'A';
		a = s[X];
		b = s[Y];
		if (a != b)
		{
			for (int j = 0; j < 27; j++)
			{
				if (s[j]==b)
				{
					s[j] = a;
				}
			}
			MinL += edge[i].val;
		}
	}
	return MinL;
}
int main()
{
	int i = 0, j = 0;
	int n = 0, m = 0, o = 0;
	char T1, T2;
	while (scanf("%d", &n) != EOF&&n)
	{
		getchar();
		k = 0;
		for (i = 1; i<n; i++) {
			scanf("%c %d", &T1, &m);
			for (j = 1; j <= m; j++) 
			{
				getchar();
				scanf("%c %d", &T2, &o);
				edge[k].begin = T1,
					edge[k].end = T2;
				edge[k].val = o;
				k++;
			}
			getchar();
		}
		sort(edge, edge + k, Cmp);
		MinL = 0;
		printf("%d\n", Kruskal());
	}
	return 0;
}